// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Chaiyawatkit",
            "url": "https://github.com/chaiyawatkit",
            "email": "chaiyawatkit160340@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/access-token": {
            "post": {
                "description": "Auth user by email and password",
                "tags": [
                    "auth"
                ],
                "summary": "GetAccessTokenByRefreshToken UserName",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.DataUserAuthenticated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Auth user by email and password",
                "tags": [
                    "auth"
                ],
                "summary": "Login UserName",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.DataUserAuthenticated"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.MessageResponse"
                        }
                    }
                }
            }
        },
        "/todolist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all TodoList",
                "tags": [
                    "todolist"
                ],
                "summary": "Get all TodoList",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/todo.ResponseTodo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new todoList on the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todolist"
                ],
                "summary": "Create New Todolist",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todo.NewTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/todo.Todolist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            }
        },
        "/todolist/data": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all TodoList by query",
                "tags": [
                    "todolist"
                ],
                "summary": "Get all TodoList by query",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todo.DataTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_chaiyawatkit_clean-architecture-gorm-mysql_src_application_usecases_todo.PaginationResultTodo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            }
        },
        "/todolist/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get TodoList by ID on the system",
                "tags": [
                    "todolist"
                ],
                "summary": "Get TodoList by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of todolist",
                        "name": "todo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/todo.Todolist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update  TodoList by id",
                "tags": [
                    "todolist"
                ],
                "summary": "Update  TodoList by id",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/todo.NewTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_chaiyawatkit_clean-architecture-gorm-mysql_src_application_usecases_todo.PaginationResultTodo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete TodoList by ID",
                "tags": [
                    "todolist"
                ],
                "summary": "Get TodoList by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of todolist",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/todo.MessageResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all Users on the system",
                "tags": [
                    "user"
                ],
                "summary": "Get all Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.ResponseUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new user on the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create New UserName",
                "parameters": [
                    {
                        "description": "body data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.NewUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.ResponseUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    }
                }
            }
        },
        "/user/{user_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Users by ID on the system",
                "tags": [
                    "user"
                ],
                "summary": "Get users by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.ResponseUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AccessTokenRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "example": "badbunybabybebe"
                }
            }
        },
        "auth.DataUserAuthenticated": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "some@mail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Kuk"
                },
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "lastName": {
                    "type": "string",
                    "example": "Mama"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "userName": {
                    "type": "string",
                    "example": "UserName"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "Password123"
                }
            }
        },
        "controllers.FieldDateRangeDataRequest": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string",
                    "example": "2021-01-01"
                },
                "field": {
                    "type": "string",
                    "example": "createdAt"
                },
                "startDate": {
                    "type": "string",
                    "example": "2021-01-01"
                }
            }
        },
        "controllers.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.SortByDataRequest": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string",
                    "example": "asc"
                },
                "field": {
                    "type": "string",
                    "example": "name"
                }
            }
        },
        "github_com_chaiyawatkit_clean-architecture-gorm-mysql_src_application_usecases_todo.PaginationResultTodo": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/todo.Todolist"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "nextCursor": {
                    "type": "integer"
                },
                "numPages": {
                    "type": "integer"
                },
                "prevCursor": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "todo.DataTodoRequest": {
            "type": "object",
            "properties": {
                "fieldsDateRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.FieldDateRangeDataRequest"
                    }
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "globalSearch": {
                    "type": "string",
                    "example": "chaiyawatkit"
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "sortBy": {
                    "$ref": "#/definitions/controllers.SortByDataRequest"
                }
            }
        },
        "todo.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "todo.NewTodoRequest": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Something"
                },
                "name": {
                    "type": "string",
                    "example": "Something"
                }
            }
        },
        "todo.ResponseTodo": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2021-02-24 20:19:39"
                },
                "description": {
                    "type": "string",
                    "example": "Some Description"
                },
                "id": {
                    "type": "integer",
                    "example": 1099
                },
                "name": {
                    "type": "string",
                    "example": "Aspirina"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-02-24 20:19:39"
                }
            }
        },
        "todo.Todolist": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "user.NewUserRequest": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "role",
                "user"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Kuk"
                },
                "lastName": {
                    "type": "string",
                    "example": "Mmama"
                },
                "password": {
                    "type": "string",
                    "example": "Password123"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "user": {
                    "type": "string",
                    "example": "Kuk"
                }
            }
        },
        "user.ResponseUser": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2021-02-24 20:19:39"
                },
                "email": {
                    "type": "string",
                    "example": "kuk@mail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "kuk"
                },
                "id": {
                    "type": "integer",
                    "example": 999
                },
                "lastName": {
                    "type": "string",
                    "example": "Mama"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-02-24 20:19:39"
                },
                "user": {
                    "type": "string",
                    "example": "kuk"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Golang Clean-Architecture",
	Description:      "Documentation's  Golang Clean-Architecture",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
